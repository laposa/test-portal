---
const { session, filter } = Astro.props;
import { formatTimestamp } from "../utils/formatter";
import { TestResult, TestType } from "../enums";
import type { Run } from "../interfaces";

export const runs: Run[] = [
  {
		id: 1,
		test: {
			id: 1,
			title: 'Test 1',
			lastResult: TestResult.Passed,
			timestamp: formatTimestamp(new Date()),
			type: TestType.Automated,
		},
		timestamp: formatTimestamp(new Date()),
		result: TestResult.Passed,
		suite: "Suite 1",
		session: "Session 1",
	},
	{
		id: 2,
		test: {
			id: 2,
			title: 'Test 2',
			lastResult: TestResult.Failed,
			timestamp: formatTimestamp(new Date()),
			type: TestType.Manual,
			error: 'Bad request',
		},
		timestamp: formatTimestamp(new Date()),
		result: TestResult.Failed,
		suite: "Suite 1",
		code: "<p>Greetings</p>",
		error: 'Bad request',
		session: "Session 1",
	},
	{
		id: 3,
		test: {
			id: 3,
			title: 'Test 3',
			lastResult: TestResult.Passed,
			timestamp: formatTimestamp(new Date()),
			type: TestType.Automated,
		},
		timestamp: formatTimestamp(new Date()),
		result: TestResult.Passed,
		suite: "Suite 1",
		session: "Session 1",
	},
	{
		id: 4,
		test: {
			id: 1,
			title: 'Test 1',
			lastResult: TestResult.Passed,
			timestamp: formatTimestamp(new Date()),
			type: TestType.Automated,
		},
		timestamp: formatTimestamp(new Date()),
		result: TestResult.Passed,
		suite: "Suite 2",
		session: "Session 1",
  },
	{
		id: 5,
		test: {
			id: 2,
			title: 'Test 2',
			lastResult: TestResult.Failed,
			timestamp: formatTimestamp(new Date()),
			type: TestType.Automated,
		},
		timestamp: formatTimestamp(new Date()),
		result: TestResult.Failed,
		suite: "Suite 2",
		session: "Session 1",
  },
	{
		id: 6,
		test: {
			id: 3,
			title: 'Test 3',
			lastResult: TestResult.Passed,
			timestamp: formatTimestamp(new Date()),
			type: TestType.Automated,
		},
		timestamp: formatTimestamp(new Date()),
		result: TestResult.Passed,
		suite: "Suite 2",
		session: "Session 1",
  },
];
---

<div class="runs">
	{ filter && 
		<div class="filter">
			<div class="search">
				<input type="text" placeholder="Search runs" />
				<img src="/images/icons/search-icon.svg" alt="search" />
			</div>
			<input
				type="text"
				class="date"
				placeholder="Date from"
				onfocus="(this.type='date')"
				onblur="(this.type='text')"
			/>
			<input
				type="text"
				class="date"
				placeholder="Date to"
				onfocus="(this.type='date')"
				onblur="(this.type='text')"
			/>
			<select name="session" id="">
				<option value="">Session</option>
				<option value="0">Session 1</option>
				<option value="1">Session 2</option>
				<option value="2">Session 3</option>
			</select>
		</div>
	</div>
}

<table>
  <thead>
    <tr>
      <th>Run ID</th>
      <th>Test Name</th>
      <th>Timestamp</th>
      <th>Suite</th>
      <th>Session</th>
      <th>Result</th>
      <th>Code</th>
      <th>Error</th>
    </tr>
  </thead>
  <tbody>
    {
			runs.map((run) => (
				<tr>
					<td><a href={"/sessions/" + (session ?? 0) + "/test/" + run.test.id + "/run/" + run.id}>{run.id}</a></td>
					<td>{run.test.title}</td>
					<td>{run.timestamp}</td>
					<td>{run.suite}</td>
					<td>{run.session}</td>
					<td>{run.result === TestResult.Passed ? <span class="pass">Passed</span> : <span class="fail">Failed</span>}</td>
          <td>{run.code ? <a href="#">Show</a> : ''}</td>
          <td>{run.error ? <a href="#">Show</a> : ''}</td>
				</tr>
			))
		}
  </tbody>
</table>

<style>
	.runs {
		& .filter {
			width: 100%;
			display: flex;
			gap: 10px;
			margin: 1rem 0;

			& .search {
				width: 30%;
				position: relative;

				& input {
					width: 100%;
				}

				& img {
					width: 20px;
					position: absolute;
					right: 0.5rem;
					top: 8px;
					cursor: pointer;
				}
			}

			& .date {
				width: 15%;
			}

			& .issuer {
				width: 20%;
			}

			& a {
				display: flex;
				margin-left: auto;
				background-color: var(--primary);
				border: none;
				color: white;
				text-decoration: none;
				padding: 0 2.5rem 0 1rem;
				align-items: center;
				position: relative;

				&:after {
					content: "+";
					position: absolute;
					top: -2px;
					line-height: normal;
					right: 1rem;
					font-size: 2rem;
				}
			}
		}
	}
</style>